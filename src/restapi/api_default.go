/*
 * Сервис баннеров
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"banner/models"
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DefaultAPIController binds http requests to an api service and writes the service results to the http response
type DefaultAPIController struct {
	service      DefaultAPIServicer
	errorHandler ErrorHandler
}

// DefaultAPIOption for how the controller is set up.
type DefaultAPIOption func(*DefaultAPIController)

// WithDefaultAPIErrorHandler inject ErrorHandler into controller
func WithDefaultAPIErrorHandler(h ErrorHandler) DefaultAPIOption {
	return func(c *DefaultAPIController) {
		c.errorHandler = h
	}
}

// NewDefaultAPIController creates a default api controller
func NewDefaultAPIController(s DefaultAPIServicer, opts ...DefaultAPIOption) Router {
	controller := &DefaultAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultAPIController
func (c *DefaultAPIController) Routes() Routes {
	return Routes{
		"BannerGet": Route{
			strings.ToUpper("Get"),
			"/banner",
			c.BannerGet,
		},
		"BannerIdDelete": Route{
			strings.ToUpper("Delete"),
			"/banner/{id}",
			c.BannerIdDelete,
		},
		"BannerIdPatch": Route{
			strings.ToUpper("Patch"),
			"/banner/{id}",
			c.BannerIdPatch,
		},
		"BannerPost": Route{
			strings.ToUpper("Post"),
			"/banner",
			c.BannerPost,
		},
		"UserBannerGet": Route{
			strings.ToUpper("Get"),
			"/user_banner",
			c.UserBannerGet,
		},
	}
}

// BannerGet - Получение всех баннеров c фильтрацией по фиче и/или тегу
func (c *DefaultAPIController) BannerGet(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	tokenParam := r.Header.Get("token")
	var featureIdParam int32
	if query.Has("feature_id") {
		param, err := parseNumericParameter[int32](
			query.Get("feature_id"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		featureIdParam = param
	} else {
	}
	var tagIdParam int32
	if query.Has("tag_id") {
		param, err := parseNumericParameter[int32](
			query.Get("tag_id"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		tagIdParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	result, err := c.service.BannerGet(r.Context(), tokenParam, featureIdParam, tagIdParam, limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BannerIdDelete - Удаление баннера по идентификатору
func (c *DefaultAPIController) BannerIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int32](
		params["id"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	tokenParam := r.Header.Get("token")
	result, err := c.service.BannerIdDelete(r.Context(), idParam, tokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BannerIdPatch - Обновление содержимого баннера
func (c *DefaultAPIController) BannerIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int32](
		params["id"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	bannerIdDeleteRequestParam := models.BannerIdDeleteRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bannerIdDeleteRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := models.AssertBannerIdDeleteRequestRequired(bannerIdDeleteRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := models.AssertBannerIdDeleteRequestConstraints(bannerIdDeleteRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	tokenParam := r.Header.Get("token")
	result, err := c.service.BannerIdPatch(r.Context(), idParam, bannerIdDeleteRequestParam, tokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BannerPost - Создание нового баннера
func (c *DefaultAPIController) BannerPost(w http.ResponseWriter, r *http.Request) {
	bannerGetRequestParam := models.BannerGetRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bannerGetRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := models.AssertBannerGetRequestRequired(bannerGetRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := models.AssertBannerGetRequestConstraints(bannerGetRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	tokenParam := r.Header.Get("token")
	result, err := c.service.BannerPost(r.Context(), bannerGetRequestParam, tokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UserBannerGet - Получение баннера для пользователя
func (c *DefaultAPIController) UserBannerGet(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var tagIdParam int32
	if query.Has("tag_id") {
		param, err := parseNumericParameter[int32](
			query.Get("tag_id"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		tagIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "tag_id"}, nil)
		return
	}
	var featureIdParam int32
	if query.Has("feature_id") {
		param, err := parseNumericParameter[int32](
			query.Get("feature_id"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		featureIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "feature_id"}, nil)
		return
	}
	var useLastRevisionParam bool
	if query.Has("use_last_revision") {
		param, err := parseBoolParameter(
			query.Get("use_last_revision"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		useLastRevisionParam = param
	} else {
		var param bool = false
		useLastRevisionParam = param
	}
	tokenParam := r.Header.Get("token")
	result, err := c.service.UserBannerGet(r.Context(), tagIdParam, featureIdParam, useLastRevisionParam, tokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
