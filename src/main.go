/*
 * Сервис баннеров
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"banner/internal/env"
	openapi "banner/restapi"
	"context"
	"errors"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"
)

func main() {
	env.LoadEnv()
	DefaultAPIService := openapi.NewDefaultAPIService()
	DefaultAPIController := openapi.NewDefaultAPIController(DefaultAPIService)

	// Создаем маршрутизатор и передаем контроллер
	router := openapi.NewRouter(DefaultAPIController)
	// Создаем контекст для управления сервером
	_, cancel := context.WithCancel(context.Background())
	defer cancel()

	// Запускаем сервер в отдельной горутине с использованием контекста
	server := &http.Server{
		Addr:    os.Getenv("PORT"),
		Handler: router,
	}
	go func() {
		log.Printf("Server started at port " + os.Getenv("PORT"))
		if err := server.ListenAndServe(); err != nil && !errors.Is(err, http.ErrServerClosed) {
			log.Fatalf("Ошибка запуска сервера: %v", err)
		}
	}()

	// Ожидание сигнала завершения работы сервера
	stop := make(chan os.Signal, 1)
	signal.Notify(stop, syscall.SIGTERM, syscall.SIGINT)
	<-stop

	// Остановка сервера с заданным таймаутом
	log.Println("Shutting down server...")
	ctxShutdown, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	if err := server.Shutdown(ctxShutdown); err != nil {
		log.Fatalf("Ошибка остановки сервера: %v", err)
	}
	if err := DefaultAPIService.Stop(); err != nil {
		log.Fatalf("Ошибка остановки сервера: %v", err)
	}
	log.Println("Successfully shutdown server...")
}
